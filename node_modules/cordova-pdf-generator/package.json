{
  "_from": "cordova-pdf-generator",
  "_id": "cordova-pdf-generator@2.0.7",
  "_inBundle": false,
  "_integrity": "sha512-zsOczPzvGQR7bnVCQFxsJqeeOR/I1TD8AAjl1XvK35Wad+LeJ+cxEhH995an41o7/nHVCU50Kf1hOpvtLQ2qhw==",
  "_location": "/cordova-pdf-generator",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "cordova-pdf-generator",
    "fetchSpec": "latest",
    "name": "cordova-pdf-generator",
    "raw": "cordova-pdf-generator",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cordova-pdf-generator/-/cordova-pdf-generator-2.0.7.tgz",
  "_shasum": "9d3ad799985e3dc626da62f6bb65b4f89534b540",
  "_spec": "cordova-pdf-generator",
  "_where": "/home/angel_romero/Documentos/ICONE/Aplicaciones/BookYourDoc",
  "author": {
    "name": "cesar"
  },
  "bugs": {
    "url": "https://github.com/cesarvr/pdf-generator/issues"
  },
  "bundleDependencies": false,
  "cordova": {
    "id": "cordova-pdf-generator",
    "platforms": [
      "android",
      "ios"
    ]
  },
  "dependencies": {},
  "deprecated": false,
  "description": "is a HTML to PDF (offline) Generator.",
  "devDependencies": {},
  "engines": [
    {
      "name": "cordova",
      "version": ">=3.4.0"
    }
  ],
  "homepage": "https://github.com/cesarvr/pdf-generator#readme",
  "keywords": [
    "cordova-android",
    "cordova-ios",
    "ecosystem:cordova"
  ],
  "license": "MIT",
  "name": "cordova-pdf-generator",
  "optionalDependencies": {},
  "readme": "# cordova-pdf-generator\n\n## Index \n<!--ts-->\n   * [Getting Started](#gstarted)\n   * [Features](#features)\n   * [How to Install](#install)\n   * [API](#api)\n   * [How Tos](#howto)\n   * [Demo App](#demo)\n<!--te-->\n\n\nSimple plugin to generate (offline) pdf. the plugin transform HTML to PDF and also provide the mechanism to share the pdf to other apps like Mail, etc. For now works in iOS and Android, if you want to add other platform feel free contribute.   \n\nThe iOS HTML to PDF transformation is based in this work [BNHtmlPdfKit](https://github.com/brentnycum/BNHtmlPdfKit), I just add a new method to allow transformation between plain HTML to PDF.\n\n\n<a name=\"gstarted\"/>\n\n## Getting Started \n\n![Demo](https://raw.githubusercontent.com/cesarvr/pdf-generator/master/img/pdf-generator.gif)\n\nHere you can find a [starting guide](https://dzone.com/articles/how-to-write-a-html-to-pdf-app-for-androidios-usin).\n\n\n<a name=\"features\"/>\n\n## Features\n\n- Generates a PDF document using a URL or HTML.\n- Open-with menu, open the context menu and (push to cloud, print, save, mail, etc...).  \n- Return the Base64 file representation back, so you can upload the file to a server (IOS & Android only).\n\n\n## Supported Platforms\n\n* Android\n* iOS\n\n<a name=\"install\"/>\n\n## Installing the easy way (Cordova CLI)\n\n    cordova plugin add cordova-pdf-generator\n\n\n## Installing using Plugman\n\n    cordova platform add ios\n    plugman install --platform ios --project platforms/ios --plugin cordova-pdf-generator\n\n\n## Installing using NPM\n\n    npm install cordova-pdf-generator\n    cordova plugins add node_modules/cordova-pdf-generator\n\n\n## Installing the hard way.\n\nClone the plugin\n\n    $ git clone https://github.com/cesarvr/pdf-generator\n\nCreate a new Cordova Project\n\n    $ cordova create hello com.example.helloapp Hello\n\nInstall the plugin\n\n    $ cd hello\n    $ cordova plugin add ../pdf-generator\n\n\n<a name=\"api\"/>\n\n## API\n\nBefore using the plugin just make sure that the device is ready by listening to the onDeviceReady event:\n\n```js\ndocument.addEventListener('deviceready', function(){\n  // start using cordova plugin here.\n})\n\n```\n\n\n### Description\n\nThe plugin expose a global variable named **pdf**, this variable expose the following functions.\n\n#### pdf.fromURL( url, options )\n\nCreates a PDF using a URL, it download the document into an in memory Webkit object, and renders it into a PDF.\n\n- **url** : Takes the URL with the HTML document you want to transform to PDF, once the document finish loading is render by webkit and transformed into a PDF file.\n\n\nExample:\n\n```js\nlet options = {\n                documentSize: 'A4',\n                type: 'base64'\n              }\n\npdf.fromURL('http://www.google.es', options)\n    .then(()=>'ok')\n    .catch((err)=>console.err(err))\n```\n\n#### pdf.fromData( url, options )\n\nCreates a PDF using string with the HTML representation, it download the document into an in memory Webkit object, and renders it into a PDF.\n\n- **data** : Takes a string representing the HTML document, it load this in Webkit and creates a PDF.  \n\nExample:\n\n```js\nlet options = {\n                documentSize: 'A4',\n                type: 'base64'\n              }\n\npdf.fromData('<html><h1>Hello World</h1></html>', options)\n    .then((base64)=>'ok')   // it will\n    .catch((err)=>console.err(err))\n```\n\n#### Options\n\n##### documentSize\n\n- Its take ```A4, A3, A2``` this specify the format of the paper, just available in iOS, in Android this option is ignored.\n\n##### type\n\n- ```base64``` it will return a Base64 representation of the PDF file. ```{ type: 'base64' } ``, is not type is provided this one is choosen by default. `\n\n```js\nlet options = {\n                documentSize: 'A4',\n                type: 'base64'\n              }\n\npdf.fromData('<html><h1>Hello World</h1></html>', options)\n    .then((base64)=> console.log(base64) )   // returns base64:JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PC9DcmVh...\n    .catch((err)=>console.err(err))\n\n\n```\n\n\n\n- ```share``` It will delegate the file to the OS printing infraestructure, this basically will allow the user to handle the file himself using the mobile OS features available.\n\n```js\nlet options = {\n                documentSize: 'A4',\n                type: 'share'\n              }\n\npdf.fromData( '<html><h1>Hello World</h1></html>', options)\n    .then((stats)=> console.log('status', stats) )   // ok..., ok if it was able to handle the file to the OS.  \n    .catch((err)=>console.err(err))\n\n```\n\n\n\n##### filename\n\n- You can specify the name of the PDF file.  \n\n```js\nlet options = {\n                documentSize: 'A4',\n                type: 'share',\n                fileName: 'myFile.pdf'\n              }\n\npdf.fromData( '<html><h1>Hello World</h1></html>', options)\n    .then((stats)=> console.log('status', stats) )   // ok..., ok if it was able to handle the file to the OS.  \n    .catch((err)=>console.err(err))\n\n```\n\n\n<a name=\"howto\"/>\n\n#### How Tos\n\n##### Loading an internal CSS, using raw HTML. \n```js \n\n# cssFile have to be the following: \n# iOS: www/<css-folder>/<your-file.css>\n# Android: file:///android_asset/www/<css-folder>/<your-file.css>\n\nfunction createPDF(cssFile) {\n  var opts = {\n      documentSize: \"A4\",\n      landscape: \"portrait\",\n      type: \"share\",\n      fileName: 'my-pdf.pdf'\n  }\n\n  var payload = _.template(' <head><link rel=\"stylesheet\" href=\"<%=css_file%>\"></head><body> <h1> Hello World </h1></body>')\n\n  pdf.fromData(payload({css_file: cssFile}),\n          opts)\n      .then(progressHide)\n      .catch(progressHide);\n}\n\n```\n\n\n\n##### Loading from Device Filesystem.\n\n```js\n\n      //Example: file:///android_asset/index.html\n\n      function printInternalFile(param) {\n\n        /* generate pdf using url. */\n        if(cordova.platformId === 'ios') {\n\n          // To use window.resolveLocalFileSystemURL, we need this plugin https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-file/\n          // You can add this by doing cordova plugin add cordova-plugin-file or\n          // cordova plugin add https://github.com/apache/cordova-plugin-file\n          window.resolveLocalFileSystemURL(cordova.file.applicationDirectory,\n            (url) => {\n              var file = param.replace('file:///android_asset/',url.nativeURL);\n\n              pdf.fromURL(file, {\n                  documentsize: 'a4',\n                  landscape: 'portrait',\n                  type: 'share'\n              })\n                .then((stats)=> this.preparetogobackground )\n                .catch((err)=> this.showerror)\n            },\n            (err) =>\n            console.log('error', err, '  args ->', arguments)\n          );\n        }else {\n              pdf.fromURL(param, {\n                  documentsize: 'a4',\n                  landscape: 'portrait',\n                  type: 'share'\n              })\n                .then((stats)=> this.preparetogobackground )\n                .catch((err)=> this.showerror)\n        }\n    }\n```\n\n##### Ionic/Angular 2 Example:\n\n```js\nimport { Component } from '@angular/core';\n\nimport { NavController } from 'ionic-angular';\n\ndeclare var cordova:any;    //global;\n\n@Component({\n  selector: 'page-home',\n  templateUrl: 'home.html'\n})\nexport class HomePage {\n\n  constructor(public navCtrl: NavController) {\n      const before = Date.now();\n\n            document.addEventListener('deviceready', () => {\n                console.log('DEVICE READY FIRED AFTER', (Date.now() - before), 'ms');\n\n                //generate the pdf.\n                cordova.plugins.pdf.fromData( '<html> <h1>  Hello World  </h1> </html>', options )\n                .then(()=>'ok')\n                .catch((err)=>console.err(err))\n  }\n\n}\n\n```\n\n##### Saving a pdf file directly into the file system\n\nIf you'd like to directly save the pdf file into the Downloads directory of the device, or any other, without asking the user for what to do with the file, you will need to use type as `base64` and then use such information to save the pdf into a file. For this you will need the plugin `cordova-plugin-file`.\n\nHere is an example\n\n```js\nvar fileName = \"myPdfFile.pdf\";\n    \nvar options = {\n    documentSize: 'A4',\n    type: 'base64'                \n};\n\nvar pdfhtml = '<html><body style=\"font-size:120%\">This is the pdf content</body></html>';\n        \npdf.fromData(pdfhtml , options)\n    .then(function(base64){               \n        // To define the type of the Blob\n        var contentType = \"application/pdf\";\n            \n        // if cordova.file is not available use instead :\n        // var folderpath = \"file:///storage/emulated/0/Download/\";\n        var folderpath = cordova.file.externalRootDirectory + \"Download/\"; //you can select other folders\n        savebase64AsPDF(folderpath, fileName, base64, contentType);          \n    })  \n    .catch((err)=>console.err(err));\n\n```    \n\nYou will also need these two functions. Due to javascript functions hoisting you can declare them afterwards as here:\n\n```js\n/**\n * Convert a base64 string in a Blob according to the data and contentType.\n * \n * @param b64Data {String} Pure base64 string without contentType\n * @param contentType {String} the content type of the file i.e (application/pdf - text/plain)\n * @param sliceSize {Int} SliceSize to process the byteCharacters\n * @see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\n * @return Blob\n */\nfunction b64toBlob(b64Data, contentType, sliceSize) {\n        contentType = contentType || '';\n        sliceSize = sliceSize || 512;\n\n        var byteCharacters = atob(b64Data);\n        var byteArrays = [];\n\n        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n            var byteNumbers = new Array(slice.length);\n            for (var i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n\n            var byteArray = new Uint8Array(byteNumbers);\n\n            byteArrays.push(byteArray);\n        }\n\n      var blob = new Blob(byteArrays, {type: contentType});\n      return blob;\n}\n\n/**\n * Create a PDF file according to its database64 content only.\n * \n * @param folderpath {String} The folder where the file will be created\n * @param filename {String} The name of the file that will be created\n * @param content {Base64 String} Important : The content can't contain the following string (data:application/pdf;base64). Only the base64 string is expected.\n */\nfunction savebase64AsPDF(folderpath,filename,content,contentType){\n    // Convert the base64 string in a Blob\n    var DataBlob = b64toBlob(content,contentType);\n    \n    console.log(\"Starting to write the file :3\");\n    \n    window.resolveLocalFileSystemURL(folderpath, function(dir) {\n        console.log(\"Access to the directory granted succesfully\");\n        dir.getFile(filename, {create:true}, function(file) {\n            console.log(\"File created succesfully.\");\n            file.createWriter(function(fileWriter) {\n                console.log(\"Writing content to file\");\n                fileWriter.write(DataBlob);\n            }, function(){\n                alert('Unable to save file in path '+ folderpath);\n            });\n        });\n    });\n}\n```\n\n\n\n#### Deprecated\n\nHere are examples to use the deprecated methods.\n\nThis generates a pdf from a URL, it convert HTML to PDF and returns the file representation in base64.  \n\n```js\n document.addEventListener('deviceready', function() {\n\n        pdf.htmlToPDF({\n            url: 'http://www.google.es',\n            documentSize: 'A4',\n            landscape: 'portrait',\n            type: 'base64'\n        }, this.success, this.failure);\n\n });\n```\n\nThe same but giving HTML without URL.\n\n```js\n document.addEventListener('deviceready', function() {\n\n     pdf.htmlToPDF({\n            data: '<html> <h1>  Hello World  </h1> </html>',\n            documentSize: 'A4',\n            landscape: 'portrait',\n            type: 'base64'\n        }, this.success, this.failure);\n\n });\n\n```\n\nOpening the pdf with other app menu.\n\n```js\n document.addEventListener('deviceready', function() {\n\n     pdf.htmlToPDF({\n            data: '<html> <h1>  Hello World  </h1> </html>',\n            documentSize: 'A4',\n            landscape: 'portrait',\n            type: 'share' //use share to open the open-with-menu.\n        }, this.success, this.failure);\n\n });\n```\n\n<a name=\"demo\"/>\n\n# Demo\n\n- Cordova/Javascript [Demo](https://github.com/cesarvr/pdf-generator-example).\n- Ionic/Angular 2 [Example](https://github.com/cesarvr/ionic2-basic-example)\n\n\nInstall iOS or Android platform\n\n    cordova platform add ios\n    cordova platform add android\n\nRun the code\n\n    cordova run ios\n    cordova run android\n\n## More Info\n\n[here]:https://github.com/cesarvr/pdf-generator-example\n\nFor more information on setting up Cordova see [the documentation](http://cordova.apache.org/docs/en/4.0.0/guide_cli_index.md.html#The%20Command-Line%20Interface)\n\nFor more info on plugins see the [Plugin Development Guide](http://cordova.apache.org/docs/en/4.0.0/guide_hybrid_plugins_index.md.html#Plugin%20Development%20Guide)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cesarvr/pdf-generator.git"
  },
  "version": "2.0.7"
}
